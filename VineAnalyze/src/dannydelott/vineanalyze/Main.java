package dannydelott.vineanalyze;

import java.awt.Desktop;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.io.FileUtils;

import com.eclipsesource.json.JsonArray;
import com.eclipsesource.json.JsonObject;
import com.eclipsesource.json.JsonValue;
import com.eclipsesource.json.ParseException;

/**
 * A small program to go through the output generated by fetch.jar and annotate
 * whether or not the video contains a target word. Place this executable JAR
 * file in the directory containing the video files and the results.json file
 * generated by fetch.jar.
 * 
 * @author dannydelott
 * 
 */
public class Main {

	/**
	 * Creates the analysis.json file containing the human-annotated video
	 * analysis.
	 * 
	 * EX: java -jar analyze.jar vines.json 25
	 * 
	 * @param args
	 *            filepath to vines.json<br />
	 *            number of vines to analyze
	 * @throws IOException
	 * @throws URISyntaxException
	 */
	public static void main(String[] args) throws IOException,
			URISyntaxException {

		Timer timer = new Timer();
		timer.begin();

		int numGood = 0;
		int numBad = 0;

		// --------------------------------------
		// 1. Gets the vines.json file to analyze
		// --------------------------------------

		File file;
		try {
			file = new File(args[0]);
		} catch (ArrayIndexOutOfBoundsException e1) {
			System.out
					.println("ERROR: Filepath to vines.json and number to analyze are either missing or invalid.");
			return;
		} catch (NullPointerException e) {
			System.out
					.println("ERROR: Filepath to vines.json file is either missing or invalid.");
			return;
		}

		int numToAnalyze;
		try {
			numToAnalyze = Integer.parseInt(args[1]);

		} catch (ArrayIndexOutOfBoundsException e1) {
			System.out
					.println("ERROR: Filepath to vines.json and number to analyze are either missing or invalid.");
			return;
		} catch (NumberFormatException e) {
			System.out
					.println("ERROR: Number to analyze is either missing or invalid.");
			return;
		}

		// -----------------------------------------------
		// 2. Puts lines from vines.json into objects list
		// -----------------------------------------------

		List<String> lines = FileUtils.readLines(file, "utf-8");
		List<JsonObject> objects = new ArrayList<JsonObject>();
		for (int i = 0; i < lines.size(); i++) {
			try {
				JsonObject json = JsonObject.readFrom(lines.get(i));
				objects.add(json);
			} catch (ParseException e1) {
				continue;
			} catch (UnsupportedOperationException e2) {
				continue;
			} catch (NullPointerException e3) {
				continue;
			}

			// stops putting lines into objects list
			// once number to analyze is reached.
			if (i == numToAnalyze) {
				break;
			}
		}

		// --------------------------------------------
		// 2. Loops over results and gets user-analysis
		// --------------------------------------------
		System.out.println("TOTAL VINES TO ANALYZE:\t" + objects.size());
		List<String> analysisList = new ArrayList<String>();
		System.out.println("BEGIN ANALYSIS\n");

		for (int i = 0; i < objects.size(); i++) {

			// gets the json object
			JsonObject json = objects.get(i);

			// --------------------------
			// 3. Prints vine information
			// --------------------------

			System.out.println("[" + (i + 1) + "]\t");
			System.out.println("\tID:\t\t\t" + json.get("id").asString());
			System.out.println("\tURL:\t\t\t" + json.get("url").asString());
			System.out.println("\tTEXT:\t\t\t" + json.get("text").asString());
			System.out.println("\tSCRUBBED TEXT:\t\t"
					+ json.get("scrubbed_text").asString());

			System.out.print("\n\tPOS TAGS:\t\t");
			printJsonArray(json, "pos_tags");

			System.out.print("\tGRAMMAR DEPENDENCIES:\t");
			printJsonArray(json, "grammar_dependencies");

			System.out.print("\tGOOD FILTERS:\t\t");
			printJsonArray(json, "good_filters");

			// ------------------
			// 4. Plays the video
			// ------------------

			String localFilePathToVideo = json.get("id").asString() + ".mp4";
			playVideo(localFilePathToVideo);

			// ---------------------
			// 5. Gets user analysis
			// ---------------------

			String input;
			boolean continueFlag = false;
			boolean good;
			boolean bad;
			Scanner scan = new Scanner(System.in);
			while (!continueFlag) {

				good = false;
				bad = false;
				json.remove("containsTargetWord");

				System.out
						.println("Does the video contain the target word? (y/n) or (r) to replay the video: \n"
								+ "(Type 'back' to return to the previous video.)");

				if (scan.hasNextLine()) {
					input = scan.nextLine();
					if (input.toLowerCase().equals("y")) {
						numGood++;
						good = true;

						json.add("containsTargetWord", true);
						analysisList.add(i, json.toString());
						saveAnalysis(analysisList);

						continueFlag = true;
					}

					else if (input.toLowerCase().equals("n")) {
						numBad++;
						bad = true;
						json.add("containsTargetWord", false);
						analysisList.add(i, json.toString());
						saveAnalysis(analysisList);

						continueFlag = true;
					}

					else if (input.toLowerCase().equals("r")) {
						playVideo(localFilePathToVideo);
					}

					else if (input.toLowerCase().equals("back")) {

						// handles beginning of list
						if (i == 0) {
							System.out.println("No previous video.");
							continue;
						}

						i = i - 2; // sets total i to i-1 after increment

						if (good) {
							numGood--;
						} else if (bad) {
							numBad--;
						}
						continueFlag = true;
					}
				} else {
					scan.next();
				}
			}

			clearConsole();

		}

		// -------------------------
		// 6. Prints analysis result
		// -------------------------
		timer.end();

		System.out.println("\nEND ANALYSIS\n");
		System.out.println("GOOD TWEETS:\t\t" + numGood);
		System.out.println("BAD TWEETS:\t\t" + numBad);
		System.out.println("TOTAL TWEETS:\t\t" + (numGood + numBad));
		System.out.println("SUCCESS RATE:\t\t"
				+ (double) Math.round(numGood * 100.0 / (numGood + numBad)));
		timer.printFormattedExecutionTime();

	}

	private static void playVideo(String path) throws IOException {
		Desktop.getDesktop().open(new File(path));
	}

	private static void printJsonArray(JsonObject j, String name) {

		JsonArray array = j.get(name).asArray();
		for (JsonValue value : array.values()) {
			System.out.println(value.asString());
			System.out.print("\t\t\t\t");
		}
		System.out.println();
	}

	private static void saveAnalysis(List<String> list) {

		try {
			FileWriter writerGood = new FileWriter("analysis-good.json");
			FileWriter writerBad = new FileWriter("analysis-bad.json");
			for (String str : list) {
				if (str.contains("\"containsTargetWord\":true")) {
					writerGood.write(str + "\n");
				}
				if (str.contains("\"containsTargetWord\":false")) {
					writerBad.write(str + "\n");
				}
			}
			writerGood.close();
			writerBad.close();

		} catch (IOException e) {

		}
	}

	private static void clearConsole() {
		for (int i = 0; i < 100; i++) {
			System.out.println();
		}
	}
}
